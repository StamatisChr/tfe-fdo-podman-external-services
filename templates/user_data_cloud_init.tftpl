#cloud-config
package_update: true
packages:
  - container-tools
  - jq
write_files:
  - path: /etc/containers/systemd/deployment.yml
    content: |
      apiVersion: "v1"
      kind: "Pod"
      metadata:
        labels:
          app: "terraform-enterprise"
        name: "terraform-enterprise"
      spec:
        restartPolicy: "Never"
        containers:
        - env:
          - name: "TFE_OPERATIONAL_MODE"
            value: "external"
          - name: "TFE_LICENSE"
            value: "${tfe_license}"
          - name: "TFE_HOSTNAME"
            value: "${tfe_hostname}"
          - name: "TFE_HTTP_PORT"
            value: "${tfe_http_port}"
          - name: "TFE_HTTPS_PORT"
            value: "${tfe_https_port}"
          - name: "TFE_TLS_CERT_FILE"
            value: "/etc/ssl/private/terraform-enterprise/${cert}"
          - name: "TFE_TLS_KEY_FILE"
            value: "/etc/ssl/private/terraform-enterprise/${key}"
          - name: "TFE_TLS_CA_BUNDLE_FILE"
            value: "/etc/ssl/private/terraform-enterprise/${bundle}"
          - name: "TFE_DISK_CACHE_VOLUME_NAME"
            value: "terraform-enterprise_terraform-enterprise-cache"
          - name: "TFE_LICENSE_REPORTING_OPT_OUT"
            value: "true"
          - name: "TFE_ENCRYPTION_PASSWORD"
            value: "${tfe_encryption_password}"

          # Database settings. See the configuration reference for more settings.
          - name: "TFE_DATABASE_HOST"
            value: "${tfe_database_host}"
          - name: "TFE_DATABASE_NAME"
            value: "${tfe_database_name}"
          - name: "TFE_DATABASE_PARAMETERS"
            value: "sslmode=disable"
          - name: "TFE_DATABASE_PASSWORD"
            value: "${tfe_database_password}"
          - name: "TFE_DATABASE_USER"
            value: "${tfe_database_user}"

          # Object storage settings. See the configuration reference for more settings.
          - name: "TFE_OBJECT_STORAGE_TYPE"
            value: "s3"
          - name: "TFE_OBJECT_STORAGE_S3_USE_INSTANCE_PROFILE"
            value: "true"
          - name: "TFE_OBJECT_STORAGE_S3_BUCKET"
            value: "${tfe_object_storage_bucket_name}"
          - name: "TFE_OBJECT_STORAGE_S3_REGION"
            value: "${aws_region}"  
          image: "images.releases.hashicorp.com/hashicorp/terraform-enterprise:${tfe_version_image}"
          name: "terraform-enterprise"
          ports:
          - containerPort: ${tfe_http_port}
            hostPort: 80
          - containerPort: ${tfe_https_port}
            hostPort: 443
          - containerPort: 9090
            hostPort: 9090
          securityContext:
            capabilities:
              add:
              - "CAP_IPC_LOCK"
            readOnlyRootFilesystem: true
            seLinuxOptions:
              type: "spc_t"
          volumeMounts:
          - mountPath: "/etc/ssl/private/terraform-enterprise"
            name: "certs"
          - mountPath: "/var/log/terraform-enterprise"
            name: "log"
          - mountPath: "/run"
            name: "run"
          - mountPath: "/tmp"
            name: "tmp"
          - mountPath: "/run/docker.sock"
            name: "docker-sock"
          - mountPath: "/var/cache/tfe-task-worker/terraform"
            name: "terraform-enterprise_terraform-enterprise-cache-pvc"
        volumes:
        - hostPath:
            path: "${tfe_host_path_to_certificates}"
            type: "Directory"
          name: "certs"
        - emptyDir:
            medium: "Memory"
          name: "log"
        - emptyDir:
            medium: "Memory"
          name: "run"
        - emptyDir:
            medium: "Memory"
          name: "tmp"
        - hostPath:
            path: "/var/run/docker.sock"
            type: "File"
          name: "docker-sock"
        - name: "terraform-enterprise_terraform-enterprise-cache-pvc"
          persistentVolumeClaim:
            claimName: "terraform-enterprise_terraform-enterprise-cache"
# Quadlet unit file for the Terraform Enterprise pod and container:
  - path: /etc/containers/systemd/terraform-enterprise.kube
    content: |
      [Install]
      WantedBy=default.target
      [Service]
      Restart=always
      [Kube]
      Yaml=deployment.yml
# The json file to create the first admin user:
  - path: ${tfe_host_path_to_scripts}/payload.json
    content: |
      {
      "username": "${admin_username}",
      "email": "${admin_email}",
      "password": "${admin_password}"
      }
# Terraform code to create resources in TFE (org and workspace)
  - path: ${tfe_host_path_to_scripts}/tfe.tf
    content: |
      variable "admin_token" {}
      provider "tfe" {
        hostname = "${tfe_hostname}"
        token    = var.admin_token
      }

      resource "tfe_organization" "my_org" {
        name  = "${org_name}" 
        email = "${admin_email}" 
      } 

      resource "tfe_workspace" "test" {
        name         = "${workspace_name}"
        organization = tfe_organization.my_org.name
      }

runcmd:
#Install and start aws ssm agent
  - sudo dnf install -y https://s3.${aws_region}.amazonaws.com/amazon-ssm-${aws_region}/latest/linux_amd64/amazon-ssm-agent.rpm
  - sudo systemctl enable --now amazon-ssm-agent
  - systemctl enable --now podman.socket

# Create directories
  - mkdir -p ${tfe_host_path_to_certificates}
  - mkdir -p ${tfe_host_path_to_scripts}

# Pull and run Certbot container to generate TLS certificates
  - podman pull docker.io/certbot/certbot:latest
  - podman run --rm -p 80:80 -v "${tfe_host_path_to_certificates}:/etc/letsencrypt/archive/${tfe_hostname}:Z" certbot/certbot certonly --standalone --non-interactive --agree-tos --register-unsafely-without-email --preferred-challenges http -d "${tfe_hostname}"

# Log in to Terraform Enterprise container image registry and pull the image
  - echo "${tfe_license}" | podman login --username terraform images.releases.hashicorp.com --password-stdin
  - podman pull images.releases.hashicorp.com/hashicorp/terraform-enterprise:${tfe_version_image}

# Reload systemd daemon and start the Terraform Enterprise service
  - systemctl daemon-reload
  - sleep 15
  - systemctl start terraform-enterprise.service
  - sleep 30

# Wait TFE to start  
  - while [ "$(curl -fsS https://${tfe_hostname}/_health_check)" != "OK" ]; do echo "$(date +"%Y-%m-%d %H:%M:%S") Waiting TFE to start..."; sleep 20; done  

# Get admin token
  - IACT_TOKEN=$(podman exec terraform-enterprise-terraform-enterprise tfectl admin token)

# Create the first admin user and get his api token  
  - |
    ADMIN_API_TOKEN=$(curl --header "Content-Type: application/json" --request POST --data @${tfe_host_path_to_scripts}/payload.json "https://${tfe_hostname}/admin/initial-admin-user?token=$IACT_TOKEN"  | jq -r '.token' )

# Pull terraform docker image
  - podman pull docker.io/hashicorp/terraform:1.11
# Run terraform with admin user api token to create resources in TFE (org and workspace)
  - podman run --rm -e TF_VAR_admin_token=$${ADMIN_API_TOKEN} -v ${tfe_host_path_to_scripts}:/workspace:z -w /workspace hashicorp/terraform:1.11 init
  - podman run --rm -e TF_VAR_admin_token=$${ADMIN_API_TOKEN} -v ${tfe_host_path_to_scripts}:/workspace:z -w /workspace hashicorp/terraform:1.11 apply -auto-approve  